{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import React from'react';import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import Image from\"react-native-web/dist/exports/Image\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import*as Permissions from'expo-permissions';import{BarCodeScanner}from'expo-barcode-scanner';var ScanScreen=function(_React$Component){_inherits(ScanScreen,_React$Component);function ScanScreen(){var _this;_classCallCheck(this,ScanScreen);_this=_possibleConstructorReturn(this,_getPrototypeOf(ScanScreen).call(this));_this.getCameraPermissions=function _callee(){var _await$Permissions$as,status;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA));case 2:_await$Permissions$as=_context.sent;status=_await$Permissions$as.status;_this.setState({hasCameraPermissions:status===\"granted\",buttonState:'clicked',scanned:false});case 5:case\"end\":return _context.stop();}}});};_this.handleBarCodeScanned=function _callee2(_ref){var type,data;return _regeneratorRuntime.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:type=_ref.type,data=_ref.data;_this.setState({scanned:true,scannedData:data,buttonState:'normal'});case 2:case\"end\":return _context2.stop();}}});};_this.state={hasCameraPermissions:null,scanned:false,scannedData:'',buttonState:'normal'};return _this;}_createClass(ScanScreen,[{key:\"render\",value:function render(){var hasCameraPermissions=this.state.hasCameraPermissions;var scanned=this.state.scanned;var buttonState=this.state.buttonState;if(buttonState===\"clicked\"&&hasCameraPermissions){return React.createElement(BarCodeScanner,{onBarCodeScanned:scanned?undefined:this.handleBarCodeScanned,style:StyleSheet.absoluteFillObject});}else if(buttonState===\"normal\"){return React.createElement(View,{style:styles.container},React.createElement(View,null,React.createElement(Image,{source:require(\"../assets/camera.jpg\"),style:{width:200,height:200}}),React.createElement(Text,{style:{textAlign:'center',fontSize:30}},\"Bar Code Scanner\")),React.createElement(Text,{style:styles.displayText},hasCameraPermissions===true?this.state.scannedData:\"Request Camera Permission\"),React.createElement(TouchableOpacity,{onPress:this.getCameraPermissions,style:styles.scanButton,title:\"Bar Code Scanner\"},React.createElement(Text,{style:styles.buttonText},\"Scan QR Code\")));}}}]);return ScanScreen;}(React.Component);export{ScanScreen as default};var styles=StyleSheet.create({container:{flex:1,justifyContent:'center',alignItems:'center'},displayText:{fontSize:15,textDecorationLine:'underline'},scanButton:{backgroundColor:'#2196F3',padding:10,margin:10},buttonText:{fontSize:20}});","map":{"version":3,"sources":["C:/Users/Arjun/Downloads/QrScanner/Qrscanner/screens/ScanScreen.js"],"names":["React","Permissions","BarCodeScanner","ScanScreen","getCameraPermissions","askAsync","CAMERA","status","setState","hasCameraPermissions","buttonState","scanned","handleBarCodeScanned","type","data","scannedData","state","undefined","StyleSheet","absoluteFillObject","styles","container","require","width","height","textAlign","fontSize","displayText","scanButton","buttonText","Component","create","flex","justifyContent","alignItems","textDecorationLine","backgroundColor","padding","margin"],"mappings":"+YAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,+SAEA,MAAO,GAAKC,CAAAA,WAAZ,KAA6B,kBAA7B,CACA,OAASC,cAAT,KAA+B,sBAA/B,C,GAEqBC,CAAAA,U,mEACjB,qBAAa,4CACX,8EADW,MAUbC,oBAVa,CAUU,sNACEH,WAAW,CAACI,QAAZ,CAAqBJ,WAAW,CAACK,MAAjC,CADF,6CACdC,MADc,uBACdA,MADc,CAGrB,MAAKC,QAAL,CAAc,CAIZC,oBAAoB,CAAEF,MAAM,GAAK,SAJrB,CAKZG,WAAW,CAAE,SALD,CAMZC,OAAO,CAAE,KANG,CAAd,EAHqB,8CAVV,OAuBbC,oBAvBa,CAuBU,2JAAOC,IAAP,MAAOA,IAAP,CAAaC,IAAb,MAAaA,IAAb,CACrB,MAAKN,QAAL,CAAc,CACZG,OAAO,CAAE,IADG,CAEZI,WAAW,CAAED,IAFD,CAGZJ,WAAW,CAAE,QAHD,CAAd,EADqB,+CAvBV,CAEX,MAAKM,KAAL,CAAa,CACXP,oBAAoB,CAAE,IADX,CAEXE,OAAO,CAAE,KAFE,CAGXI,WAAW,CAAE,EAHF,CAIXL,WAAW,CAAE,QAJF,CAAb,CAFW,aAQZ,C,8DAuBQ,CACP,GAAMD,CAAAA,oBAAoB,CAAG,KAAKO,KAAL,CAAWP,oBAAxC,CACA,GAAME,CAAAA,OAAO,CAAG,KAAKK,KAAL,CAAWL,OAA3B,CACA,GAAMD,CAAAA,WAAW,CAAG,KAAKM,KAAL,CAAWN,WAA/B,CAEA,GAAIA,WAAW,GAAK,SAAhB,EAA6BD,oBAAjC,CAAsD,CACpD,MACE,qBAAC,cAAD,EACE,gBAAgB,CAAEE,OAAO,CAAGM,SAAH,CAAe,KAAKL,oBAD/C,CAEE,KAAK,CAAEM,UAAU,CAACC,kBAFpB,EADF,CAMD,CAPD,IASK,IAAIT,WAAW,GAAK,QAApB,CAA6B,CAChC,MACE,qBAAC,IAAD,EAAM,KAAK,CAAEU,MAAM,CAACC,SAApB,EACG,oBAAC,IAAD,MACC,oBAAC,KAAD,EACE,MAAM,CAAEC,OAAO,wBADjB,CAEE,KAAK,CAAE,CAACC,KAAK,CAAC,GAAP,CAAYC,MAAM,CAAE,GAApB,CAFT,EADD,CAIC,oBAAC,IAAD,EAAM,KAAK,CAAE,CAACC,SAAS,CAAE,QAAZ,CAAsBC,QAAQ,CAAE,EAAhC,CAAb,qBAJD,CADH,CAOA,oBAAC,IAAD,EAAM,KAAK,CAAEN,MAAM,CAACO,WAApB,EACElB,oBAAoB,GAAG,IAAvB,CAA8B,KAAKO,KAAL,CAAWD,WAAzC,CAAsD,2BADxD,CAPA,CAWA,oBAAC,gBAAD,EACE,OAAO,CAAE,KAAKX,oBADhB,CAEE,KAAK,CAAGgB,MAAM,CAACQ,UAFjB,CAGE,KAAK,CAAG,kBAHV,EAIE,oBAAC,IAAD,EAAM,KAAK,CAAER,MAAM,CAACS,UAApB,iBAJF,CAXA,CADF,CAoBD,CACF,C,wBApEmC7B,KAAK,CAAC8B,S,SAAzB3B,U,aAuEnB,GAAMiB,CAAAA,MAAM,CAAGF,UAAU,CAACa,MAAX,CAAkB,CAC/BV,SAAS,CAAE,CACTW,IAAI,CAAE,CADG,CAETC,cAAc,CAAE,QAFP,CAGTC,UAAU,CAAE,QAHH,CADoB,CAM/BP,WAAW,CAAC,CACVD,QAAQ,CAAE,EADA,CAEVS,kBAAkB,CAAE,WAFV,CANmB,CAU/BP,UAAU,CAAC,CACTQ,eAAe,CAAE,SADR,CAETC,OAAO,CAAE,EAFA,CAGTC,MAAM,CAAE,EAHC,CAVoB,CAe/BT,UAAU,CAAC,CACTH,QAAQ,CAAE,EADD,CAfoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { Text, View, TouchableOpacity,Image, StyleSheet } from 'react-native';\nimport * as Permissions from 'expo-permissions';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nexport default class ScanScreen extends React.Component {\n    constructor(){\n      super();\n      this.state = {\n        hasCameraPermissions: null,\n        scanned: false,\n        scannedData: '',\n        buttonState: 'normal'\n      }\n    }\n\n    getCameraPermissions = async () =>{\n      const {status} = await Permissions.askAsync(Permissions.CAMERA);\n      \n      this.setState({\n        /*status === \"granted\" is true when user has granted permission\n          status === \"granted\" is false when user has not granted the permission\n        */\n        hasCameraPermissions: status === \"granted\",\n        buttonState: 'clicked',\n        scanned: false\n      });\n    }\n\n    handleBarCodeScanned = async({type, data})=>{\n      this.setState({\n        scanned: true,\n        scannedData: data,\n        buttonState: 'normal'\n      });\n    }\n\n    render() {\n      const hasCameraPermissions = this.state.hasCameraPermissions;\n      const scanned = this.state.scanned;\n      const buttonState = this.state.buttonState;\n\n      if (buttonState === \"clicked\" && hasCameraPermissions){\n        return(\n          <BarCodeScanner\n            onBarCodeScanned={scanned ? undefined : this.handleBarCodeScanned}\n            style={StyleSheet.absoluteFillObject}\n          />\n        );\n      }\n\n      else if (buttonState === \"normal\"){\n        return(\n          <View style={styles.container}>\n             <View>\n              <Image\n                source={require(\"../assets/camera.jpg\")}\n                style={{width:200, height: 200}}/>\n              <Text style={{textAlign: 'center', fontSize: 30}}>Bar Code Scanner</Text>\n            </View>\n          <Text style={styles.displayText}>{\n            hasCameraPermissions===true ? this.state.scannedData: \"Request Camera Permission\"\n          }</Text>     \n\n          <TouchableOpacity\n            onPress={this.getCameraPermissions}\n            style= {styles.scanButton} \n            title = \"Bar Code Scanner\">\n            <Text style={styles.buttonText}>Scan QR Code</Text>\n          </TouchableOpacity>\n        </View>\n        );\n      }\n    }\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    displayText:{\n      fontSize: 15,\n      textDecorationLine: 'underline'\n    },\n    scanButton:{\n      backgroundColor: '#2196F3',\n      padding: 10,\n      margin: 10\n    },\n    buttonText:{\n      fontSize: 20,\n    }\n  });"]},"metadata":{},"sourceType":"module"}